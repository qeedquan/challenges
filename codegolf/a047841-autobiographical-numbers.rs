/*

Definition
Here is the process to describe a number:

For each number from 0 to 9 that is present in the number:
Write down the frequency of that digit and then the digit.
For example, for the number 10213223:

There is 1 occurrence of 0,
2 occurrences of 1,
3 occurrences of 2,
2 occurrences of 3.
Therefore, the number that describes 10213223 is 10213223 (10 from the first property, 21 from the second, etc.).

Note that the number of occurrences of a digit may be greater than 9.

Task
You are to print/output all numbers that describe themselves.

Specs
Standard loopholes apply, except that you are allowed to hardcode the output or store information related to the output in your program.
The numbers in the output can be in any order.
The numbers in the output are allowed to have duplicates.
You may use any separator, if you choose to print instead of output.
You are allowed to prefix and/or postfix output if you choose to print instead of output.
The separator and the prefix and the postfix may not contain any digits (U+0030 to U+0039).
The solution must compute in one day.

Full list (109 items)
22
10213223
10311233
10313314
10313315
10313316
10313317
10313318
10313319
21322314
21322315
21322316
21322317
21322318
21322319
31123314
31123315
31123316
31123317
31123318
31123319
31331415
31331416
31331417
31331418
31331419
31331516
31331517
31331518
31331519
31331617
31331618
31331619
31331718
31331719
31331819
1031223314
1031223315
1031223316
1031223317
1031223318
1031223319
3122331415
3122331416
3122331417
3122331418
3122331419
3122331516
3122331517
3122331518
3122331519
3122331617
3122331618
3122331619
3122331718
3122331719
3122331819
10413223241516
10413223241517
10413223241518
10413223241519
10413223241617
10413223241618
10413223241619
10413223241718
10413223241719
10413223241819
41322324151617
41322324151618
41322324151619
41322324151718
41322324151719
41322324151819
41322324161718
41322324161719
41322324161819
41322324171819
1051322314251617
1051322314251618
1051322314251619
1051322314251718
1051322314251719
1051322314251819
1051322325161718
1051322325161719
1051322325161819
1051322325171819
5132231425161718
5132231425161719
5132231425161819
5132231425171819
5132232516171819
106132231415261718
106132231415261719
106132231415261819
106132231426171819
106132231526171819
613223141526171819
1011112131415161718
1011112131415161719
1011112131415161819
1011112131415171819
1011112131416171819
1011112131516171819
1011112141516171819
1011113141516171819
1111213141516171819
10713223141516271819
101112213141516171819

References
Autobiographical numbers: OEIS A047841
Biographical number: OEIS A047842

*/

fn main() {
    assert_eq!(autobiographical(108), 10713223141516271819);
    assert_eq!(autobiographical(109), 101112213141516171819);
}

// https://oeis.org/A047841
fn autobiographical(n: usize) -> u128 {
    let tab = vec![
        0,
        22,
        10213223,
        10311233,
        10313314,
        10313315,
        10313316,
        10313317,
        10313318,
        10313319,
        21322314,
        21322315,
        21322316,
        21322317,
        21322318,
        21322319,
        31123314,
        31123315,
        31123316,
        31123317,
        31123318,
        31123319,
        31331415,
        31331416,
        31331417,
        31331418,
        31331419,
        31331516,
        31331517,
        31331518,
        31331519,
        31331617,
        31331618,
        31331619,
        31331718,
        31331719,
        31331819,
        1031223314,
        1031223315,
        1031223316,
        1031223317,
        1031223318,
        1031223319,
        3122331415,
        3122331416,
        3122331417,
        3122331418,
        3122331419,
        3122331516,
        3122331517,
        3122331518,
        3122331519,
        3122331617,
        3122331618,
        3122331619,
        3122331718,
        3122331719,
        3122331819,
        10413223241516,
        10413223241517,
        10413223241518,
        10413223241519,
        10413223241617,
        10413223241618,
        10413223241619,
        10413223241718,
        10413223241719,
        10413223241819,
        41322324151617,
        41322324151618,
        41322324151619,
        41322324151718,
        41322324151719,
        41322324151819,
        41322324161718,
        41322324161719,
        41322324161819,
        41322324171819,
        1051322314251617,
        1051322314251618,
        1051322314251619,
        1051322314251718,
        1051322314251719,
        1051322314251819,
        1051322325161718,
        1051322325161719,
        1051322325161819,
        1051322325171819,
        5132231425161718,
        5132231425161719,
        5132231425161819,
        5132231425171819,
        5132232516171819,
        106132231415261718,
        106132231415261719,
        106132231415261819,
        106132231426171819,
        106132231526171819,
        613223141526171819,
        1011112131415161718,
        1011112131415161719,
        1011112131415161819,
        1011112131415171819,
        1011112131416171819,
        1011112131516171819,
        1011112141516171819,
        1011113141516171819,
        1111213141516171819,
        10713223141516271819,
        101112213141516171819,
    ];

    if n < tab.len() {
        tab[n]
    } else {
        0
    }
}
