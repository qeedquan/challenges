/*

The Task
Write a program or function which, when passed some positive integer n as input, returns Mills' Constant accurate up to n digits.

The Definition
Mills' Constant worked out to six thousand digits may be located here.

Examples
Let f be the function described by the challenge.

>>> f(1)
1

>>> f(3)
1.31

>>> f(100)
1.306377883863080690468614492602605712916784585156713644368053759966434053766826598821501403701197396
Rules
Your program must print or return Mills' Constant for any n between 1 and 1000.
Your program must approximate Mills' Constant such that all digits between the first to the nth returned or output are accurate to Mills' Constant. Extraneous digits are disallowed.
No form of hard-coding may be used. This means directly storing the digits of Mills' Constant or storing any of Mills' Primes (including those unlisted within OEIS). This rule includes compression. The solution must generate the number, not just output it.
The final digit must be rounded according to the digit following the final digit. In other words, if digit n+1 is five or greater, add one to the final digit.
Built-in functions or constants relating directly to Mills' Constant or the Riemann zeta function may not be used.
You may assume that the Riemann hypothesis is true.

*/

package main

import (
	"fmt"
	"math/big"
)

func main() {
	assert(mill(1) == "1")
	assert(mill(3) == "1.31")
	assert(mill(100) == "1.306377883863080690468614492602605712916784585156713644368053759966434053766826598821501403701197396")
}

func assert(x bool) {
	if !x {
		panic("assertion failed")
	}
}

/*

https://t5k.org/notes/MillsConstant.html
https://oeis.org/A051021
https://oeis.org/A051254

*/

func mill(n int) string {
	const value = "1.3063778838630806904686144926026057129167845851567136443680537599664340537668265988215014037011973957072969609381030868822388614478163534868871339221461943534578711003318814050935753558319326480172138323615223590622186016108566790572151979760951619929527970799256317215278412371307658491124563175184263310565215351318668415507907937238592335220842184204053205176890260257934430086952906362056989687262122749978766643851576619143877284498207759056482556091500412378852479362608804668815406437442534013107361144094137650364379301267672117131030265228386615466688048747609514410790754069841726034731077467757406400781093508342143744265420408531116549042099309085574705834879375776952333636485830549292738728149341674125027326692684046815406267631132237488238001180412062860138419144388571516091893889447899121255433847493590927444220828022602033230271063750222881310647784448170037233364060421187426083833282217696878123530496230088026722111040160650888097183477783140224908218441063774940002328241927007123330322885412858408891631372929525778166973093651795130470139352575705728841599173150678128827542000546229012628840580670155276174327063162570558788529388737166363186909678515848077172588750359175561065153430468250891572052921897945191865689610707967945409180039893947248624213626107801785354328900449933017049636682413899155939086340797151952105491383217875024893536943691100727103037261375097223428532311616862854394418806549779073923761870914189917162341094163830857574665951481419848269636465123058093661789857187529255892426179224596035618988994543329553439088187659217590693134970498201200298150826926277395786665803814559110846488611046851640734818557724338235753510635230787534450373603783814619505874443769595402141479585914677659154549440110993565481077250396717552839534482308460655782868128968938461453416525947104530618465557036621232093819117681038123324725367573656130403575560454761337176637726697111718349597802937992254426932823801446278547120993604263432100606793068847234090541766496125781876587122713805441102844767827220830725421866246366714013920833251680310719431235343900373354336266768815562590575873852974777343773835517979941207529586192686685659239393794404441199237410466547041250072965056228921055939493737867195835169837540168166461790433316480465451455123978653404377684479785822396096256703517440605230851627314291778955204293611971218935941751182268479731719947689696857464654261209316813703554549047302784269428505277429983011910840585252549065693668491805206022786209842618894322327333296288798590751480284364481020972122206285153177915265337924057130375437037059734739365236591179529064897263555555522455538616902756472976062034597864419595528405966220426928701556807231232729560491972755551173811743949804117825621003580987486943491617619114129570684583855277286350184198466337512703652944443917920788805463177615625056577965413686679661938033113000919742872110563344762934713049659157721574913547527750522281547723397827012067156134696675280445395288311113725233005379261460935741042738631248018639076880294507699523839844861429419147679655266896404947866568296130130167543860709006829296165393290464297134417920597606390254522356995500305207119585088843612395682806082631478860021219635096842048913975736162058272800028814999984626531583734042430657451461819092160709099946413003957812388002653463774985660213049893086606386016771174953591379399698572420298614171175084174969460207541319741929267383223369694366447594953594576418250391841648406526812970365524316491315705886920170678476498919205034524317771038251027004615279074415333590376032063569581448834397045748074719167305488103702038073973301254508067538623718110488187941776368406770503819025075958352784254602675884217860226294225875903603289330047370835123424312837022752236801942128044233458409214781259155393762375034995125202503539740951855001178454640982361414901101438550909779976045272508170283560657439531891063835085963526022951345104744589383269123709949467462904906164915229245946703198157229527544333669436973758769202705297493294859948444531112000169610290531919324231669808986535515211615243088017719669034942633258751653194532207576032673773508909634237709149472346330485328171491366374278165803440920143644363744142587515688972590575976524355903773395855366881278141360707455755974583433700206188994434960548072487970772377575778363768547779766003128745206690418122545225966904972888189025524207452807878976606270570129744242360519162508679363390258166214283741923618383559638983956219707223837016417241301537279414272047883572571224919810380563509271768326552463364250393548743536621400963843850670484674827332944055187647310610635933353896980087845528888088275895565365157541667273895284673350028205273578720595774647839569714478386367382466359355897526984469451826716788727363586493481839966199511692232523713190825898979068485679237975695062812946460448100771365115638515655498704385208517392602240423685187577718711832167435207471018378560390297402410200213594027613031304835082995968869314857444372087761125968291874493706521685643320388692709982044671637636631950195766009902366660881868004895867394917926632371296780685631704342841425814694044474878941250727068028264884747952896152201684173959869700459131378332574970533175789641524543258062210565980657088915582753938009038202512773782112879094474343576980802258756344089991514934630811757087842846402755193763980886715373698546330692747330298922816071686850580644815829898240588614659869903205902396589391556557584016919102571187742727151343202915748619660124669574590046276063059464677454811441960253660028441542782676295933344551485763794023700511662316367456317158182546844929255823619721258859381255024792858706668104669132652674289453562051088358027618840557485493737615907408924272755791655335454207000632937083181597464000381130809305288843535577353589855949794444632848488340897120593521549829882918987684706478763852076904724706664581636951471190100502014432987680511621715741605748439514042354829561381150604430662331808581727911583464478987048554751744008891522109725813891705672758668446640040556987305493686340591331196846466581638268121710099841284767142526332319404963167309545796605492710935088546627636406918656179431034302204237522038277221795325652555190414648505328535753523799670618832696569037989441895208781880874514662079900152995562530260541893661170267918826083198945002570881305252896894977764112486882927607558814507773131758802539575532256672933146884511360786082237229390258048670792264159318042481904042020682153926141944281192051812811382152810870713876515232430899385633085798371408403146426701075565642753917498326843463406445615580369186679147979806163224390577966659893601624040280996384642710635762885053766245609088194323001166375847963231032953823457231280113749644093988244658445605523939371114632419490174042338106570095553284142957727078167777912881511926511423784158407879959812399295139868435319110729543954252242366722759289808161453494496612806989547438945198540086840135"

	switch {
	case n < 1 || n >= len(value):
		return ""
	case n == 1:
		return fmt.Sprintf("%c", value[0])
	}

	f := new(big.Float)
	f.SetPrec(uint(len(value)))
	f.SetString(value)
	return f.Text('f', n-1)
}
