/*

Introduction
The Dragon's Curve is a fractal curve that notably appears on section title pages of the Jurassic Park novel.

It can very simply be described as a process of folding a paper strip, as explained in the Wikipedia article about this curve.

The first few iterations of the generation of this curve look like this (credits to Wikipedia for the image):

https://i.sstatic.net/J7bZL.gif

The challenge
Write a program or function that, given an integer n as input, outputs the n-th iteration of the dragon curve as ASCII art using only the symbols _ and |

You have to output the figure using only |, _ and spaces. You may not output the curve as a plot or anything else.
You can take the input as a program argument, in STDIN or as a function parameter.
Inputs will always be an integer >= 0. Your program should work for reasonable values of inputs, 12 being the highest in the test cases offered.
The first iterations shall look like this

Iteration 0 is

_
Iteration 1 is

_|
Iteration 2 is

|_
 _|
One trailing line at the end is ok. No trailing spaces allowed besides filling the line up to the rightmost character in the curve

No standard loopholes abuse as usual

Test Cases
Input 0
Output

_
Input 3
Output

   _
|_| |_
     _|
Input 5
Output

     _   _
    |_|_| |_
 _   _|    _|
|_|_|_
  |_|_|
    |_
     _|
  |_|
Input 10
Output

           _       _
         _|_|    _|_|
        |_|_   _|_|_   _
         _|_|_| |_| |_|_|
   _    |_|_|_        |_
 _|_|    _| |_|        _|
|_|_   _|_          |_|
 _|_|_|_|_|_
|_| |_|_|_|_|_
     _|_|_| |_|
    |_| |_
         _|_   _   _           _   _           _   _
   _    |_|_|_|_|_|_|_        |_|_|_|_        |_|_|_|_
 _|_|    _|_|_|_|_| |_|    _   _|_| |_|    _   _|_| |_|
|_|_   _|_|_|_|_|_        |_|_|_|_        |_|_|_|_
 _|_|_|_|_|_|_|_|_|_   _   _|_|_|_|_   _   _|_|_|_|_   _   _
|_| |_|_|_| |_|_|_| |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_
     _|_|    _|_|    _|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|
    |_|     |_|     |_| |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_
                         _|_|_|_|_|_|_|_|_|_|_| |_| |_|_|_|_
                   _    |_|_|_|_|_|_|_|_|_|_|_        |_|_|_|_
                 _|_|    _|_|_|_|_|_|_|_|_| |_|    _   _|_| |_|
                |_|_   _|_|_|_|_|_|_|_|_|_        |_|_|_|_
                 _|_|_|_|_|_|_|_|_|_|_|_|_|_        |_| |_|
                |_| |_|_|_| |_|_|_| |_|_|_|_|_
                     _|_|    _|_|    _|_|_| |_|
                    |_|     |_|     |_| |_
                                         _|_   _   _
                                   _    |_|_|_|_|_|_|_
                                 _|_|    _|_|_|_|_| |_|
                                |_|_   _|_|_|_|_|_
                                 _|_|_|_|_|_|_|_|_|_   _   _
                                |_| |_|_|_|_|_|_|_|_|_|_|_|_|_
                                     _|_|_|_|_|_|_|_|_|_|_| |_|
                                    |_| |_|_|_|_|_|_|_|_|_
               _   _                     _|_|_| |_| |_|_|_|_
              |_|_| |_             _    |_|_|_        |_|_|_|_
           _   _|    _|          _|_|    _| |_|    _   _|_| |_|
          |_|_|_                |_|_   _|_        |_|_|_|_
            |_|_|                _|_|_|_|_|_        |_| |_|
              |_   _       _    |_|_|_|_|_|_|_
           _   _|_|_|    _|_|    _|_|_|_|_| |_|
          |_|_|_|_|_   _|_|_   _|_|_|_|_|_
            |_| |_| |_|_|_|_|_| |_| |_|_|_|_
                      |_|_|_|_        |_|_|_|_
                   _   _|_| |_|    _   _|_| |_|
                  |_|_|_|_        |_|_|_|_
                    |_| |_|         |_| |_|
Input 12
Output

                                                               _   _           _   _                                           _   _           _   _
                                                              |_|_|_|_        |_|_|_|_                                        |_|_|_|_        |_|_|_|_
                                                           _   _|_| |_|    _   _|_| |_|                                    _   _|_| |_|    _   _|_| |_|
                                                          |_|_|_|_        |_|_|_|_                                        |_|_|_|_        |_|_|_|_
                                                            |_|_|_|_   _   _|_|_|_|_   _   _                                |_|_|_|_   _   _|_|_|_|_   _   _
                                                              |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_                                |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_
                                                           _   _|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|                            _   _|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|
                                                          |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_                                |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_
                                               _   _        |_|_|_|_|_|_|_|_|_| |_| |_|_|_|_                   _   _        |_|_|_|_|_|_|_|_|_| |_| |_|_|_|_
                                              |_|_|_|_        |_|_|_|_|_|_|_|_        |_|_|_|_                |_|_|_|_        |_|_|_|_|_|_|_|_        |_|_|_|_
                                           _   _|_| |_|    _   _|_|_|_|_|_| |_|    _   _|_| |_|            _   _|_| |_|    _   _|_|_|_|_|_| |_|    _   _|_| |_|
                                          |_|_|_|_        |_|_|_|_|_|_|_|_        |_|_|_|_                |_|_|_|_        |_|_|_|_|_|_|_|_        |_|_|_|_
                                            |_|_|_|_   _   _|_|_|_|_|_|_|_|_        |_| |_|                 |_|_|_|_   _   _|_|_|_|_|_|_|_|_        |_| |_|
                                              |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_                                |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_
                                           _   _|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|                            _   _|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|
                                          |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_                                |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_
                                            |_| |_| |_|_|_|_|_|_|_|_|_|_|_|_   _   _           _   _        |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_   _   _           _   _           _   _
                                                      |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_        |_|_|_|_        |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_        |_|_|_|_        |_|_|_|_
                                                   _   _|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|    _   _|_| |_|    _   _|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|    _   _|_| |_|    _   _|_| |_|
                                                  |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_        |_|_|_|_        |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_        |_|_|_|_        |_|_|_|_
                                                    |_| |_| |_|_|_|_|_|_|_|_|_|_|_|_   _   _|_|_|_|_   _   _|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_   _   _|_|_|_|_   _   _|_|_|_|_   _   _
                                                              |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|_|_| |_|_|_|_|_|_|_|_|_|_|_| |_|_|_| |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_
                                                           _   _|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|    _|_|    _|_|_|_|_|_|_|_|_|_|    _|_|    _|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|
                                                          |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_    |_|     |_| |_|_|_|_|_|_|_|_    |_|     |_| |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_
                                               _   _        |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|                _|_|_|_|_|_|_|_|                _|_|_|_|_|_|_|_|_|_|_| |_| |_|_|_|_
                                              |_|_|_|_        |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|_           _    |_|_|_|_|_| |_|_           _    |_|_|_|_|_|_|_|_|_|_|_        |_|_|_|_
                                           _   _|_| |_|    _   _|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|    _|_|        _|_|    _|_|_|_|    _|_|        _|_|    _|_|_|_|_|_|_|_|_| |_|    _   _|_| |_|
                                          |_|_|_|_        |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_    |_|         |_|_   _|_|_|_|_    |_|         |_|_   _|_|_|_|_|_|_|_|_|_        |_|_|_|_
                                            |_|_|_|_   _   _|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|                _|_|_|_|_|_|_|_|                _|_|_|_|_|_|_|_|_|_|_|_|_|_        |_| |_|
                                              |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_   _            |_| |_|_|_| |_|_                |_| |_|_|_| |_|_|_| |_|_|_|_|_
                                           _   _|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|                _|_|    _|_|                    _|_|    _|_|    _|_|_| |_|
                                          |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_   _            |_|     |_|                     |_|     |_|     |_| |_
                                            |_| |_| |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|                                                                _|_   _   _
                                                      |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_| |_|_                                                           _    |_|_|_|_|_|_|_
                                                   _   _|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|    _|_|                                                        _|_|    _|_|_|_|_| |_|
                                                  |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_    |_|                                                         |_|_   _|_|_|_|_|_
                                                    |_| |_| |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|                                                                _|_|_|_|_|_|_|_|_|_   _   _
           _       _                                          |_|_|_|_|_|_| |_|_|_| |_|_|_|_|_|_   _                                                            |_| |_|_|_|_|_|_|_|_|_|_|_|_|_
         _|_|    _|_|                                      _   _|_|_|_|_|    _|_|    _|_|_|_|_|_|_|_|                                                                _|_|_|_|_|_|_|_|_|_|_| |_|
        |_|_   _|_|_   _                                  |_|_|_|_|_|_|_    |_|     |_| |_|_|_|_|_|_   _                                                            |_| |_|_|_|_|_|_|_|_|_
         _|_|_| |_| |_|_|                      _   _        |_|_|_|_|_|_|                _|_|_|_|_|_|_|_|                                      _   _                     _|_|_| |_| |_|_|_|_
   _    |_|_|_        |_                      |_|_|_|_        |_|_| |_|_           _    |_|_|_|_|_| |_|_                                      |_|_| |_             _    |_|_|_        |_|_|_|_
 _|_|    _| |_|        _|                  _   _|_| |_|    _   _|    _|_|        _|_|    _|_|_|_|    _|_|                                  _   _|    _|          _|_|    _| |_|    _   _|_| |_|
|_|_   _|_          |_|                   |_|_|_|_        |_|_|_    |_|         |_|_   _|_|_|_|_    |_|                                   |_|_|_                |_|_   _|_        |_|_|_|_
 _|_|_|_|_|_                                |_|_|_|_   _   _|_|_|                _|_|_|_|_|_|_|_|                                           |_|_|                _|_|_|_|_|_        |_| |_|
|_| |_|_|_|_|_                                |_|_|_|_|_|_|_|_|_   _            |_| |_|_|_| |_|_                                              |_   _       _    |_|_|_|_|_|_|_
     _|_|_| |_|                            _   _|_|_|_|_|_|_|_|_|_|_|                _|_|    _|_|                                          _   _|_|_|    _|_|    _|_|_|_|_| |_|
    |_| |_                                |_|_|_|_|_|_|_|_|_|_|_|_|_   _            |_|     |_|                                           |_|_|_|_|_   _|_|_   _|_|_|_|_|_
         _|_   _   _           _   _        |_|_|_|_|_|_|_|_|_|_|_|_|_|_|                                                                   |_| |_| |_|_|_|_|_| |_| |_|_|_|_
   _    |_|_|_|_|_|_|_        |_|_|_|_        |_|_|_|_|_|_|_|_|_|_| |_|_                                                                              |_|_|_|_        |_|_|_|_
 _|_|    _|_|_|_|_| |_|    _   _|_| |_|    _   _|_|_|_|_|_|_|_|_|    _|_|                                                                          _   _|_| |_|    _   _|_| |_|
|_|_   _|_|_|_|_|_        |_|_|_|_        |_|_|_|_|_|_|_|_|_|_|_    |_|                                                                           |_|_|_|_        |_|_|_|_
 _|_|_|_|_|_|_|_|_|_   _   _|_|_|_|_   _   _|_|_|_|_|_|_|_|_|_|_|                                                                                   |_| |_|         |_| |_|
|_| |_|_|_| |_|_|_| |_|_|_|_|_|_|_|_|_|_|_| |_|_|_| |_|_|_|_|_|_   _
     _|_|    _|_|    _|_|_|_|_|_|_|_|_|_|    _|_|    _|_|_|_|_|_|_|_|
    |_|     |_|     |_| |_|_|_|_|_|_|_|_    |_|     |_| |_|_|_|_|_|_   _
                         _|_|_|_|_|_|_|_|                _|_|_|_|_|_|_|_|
                   _    |_|_|_|_|_| |_|_           _    |_|_|_|_|_| |_|_
                 _|_|    _|_|_|_|    _|_|        _|_|    _|_|_|_|    _|_|
                |_|_   _|_|_|_|_    |_|         |_|_   _|_|_|_|_    |_|
                 _|_|_|_|_|_|_|_|                _|_|_|_|_|_|_|_|
                |_| |_|_|_| |_|_                |_| |_|_|_| |_|_
                     _|_|    _|_|                    _|_|    _|_|
                    |_|     |_|                     |_|     |_|
Scoring
This is code-golf, so the shortest program in bytes wins.

*/

package main

import "fmt"

func main() {
	for i := range 12 {
		dragon(i)
	}
}

// ported from @Level River St solution
func dragon(n int) {
	m := alloc(8 << (n / 2))
	x0, x1 := iterate(m, n)
	m = trim(m, x0, x1)
	output(m, n)
}

func alloc(n int) [][]byte {
	m := make([][]byte, n)
	for y := range m {
		m[y] = make([]byte, n)
		for x := range m {
			m[y][x] = ' '
		}
	}
	return m
}

func iterate(m [][]byte, n int) (int, int) {
	x := 4 << (n / 2)
	y := x
	x0 := x + 1
	x1 := x0

	r := 3
	for i := 1; i <= 1<<n; i++ {
		d := (r & 2) - 1
		if r&1 != 0 {
			x += d
			m[y][x] = '_'
			x += d
		} else {
			m[y+max(d, 0)][x] = '|'
			y += d
			x0 = min(x0, x)
			x1 = max(x1, x)
		}
		r = (r + i/(i&(^i+1))) & 3
	}
	return x0, x1
}

func trim(m [][]byte, x0, x1 int) [][]byte {
	r := [][]byte{}
	for y := range m {
		r = append(r, m[y][x0:x1+1])
	}

	m = r
	r = [][]byte{}
loop:
	for y := range m {
		for x := range m[y] {
			if m[y][x] != ' ' {
				r = append(r, m[y])
				continue loop
			}
		}
	}

	return r
}

func output(m [][]byte, n int) {
	fmt.Printf("n=%d\n", n)
	for y := range m {
		for x := range m[y] {
			fmt.Printf("%c", m[y][x])
		}
		fmt.Println()
	}
	fmt.Println()
}
