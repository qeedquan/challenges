#!/usr/bin/env python3

"""

T(n,k) gives the number of permutations of length n with up to k inversions. This values grows very quickly, for example for T(20,100)=1551417550117463564.

The maximum number of inversions possible is n*(n-1)/2 so for k=n*(n-1)/2 we know that T(n,k)=n!.

To make this task more interesting, and to allow for a wider variety of possible answers you will only have to compute T(n,k) approximately.

Examples:
For n=3 and k from 0…3:

0.167, 0.5, 0.833, 1.0
For n=4 and k from 0…6:

0.042, 0.167, 0.375, 0.625, 0.833, 0.958, 1.0
For n=5 and k from 0…10:

0.008, 0.042, 0.117, 0.242, 0.408, 0.592, 0.758, 0.883, 0.958, 0.992, 1.0
For n=50 and k from 0…1225:



Input: One value: n.

Output:
T(n,⌊n^2/4⌋)n! rounded to three decimal places. T(n,k) is defined by OEIS sequence A161169.

Sample input and output
n = 3. Output: 0.833
n = 6. Output: 0.765
n = 9. Output: 0.694
n = 12. Output: 0.681
n = 15. Output: 0.651
n = 18. Output: 0.646
n = 50. Output: 0.586
n = 100. Output: 0.56
n = 150. Output: 0.549
n = 200. Output: 0.542
n = 250. Output: 0.538
n = 300. Output: 0.535
Your code should be correct no matter what values of n and k are given but will only be tested on k=⌊n2/4⌋. Your output must be within 0.001 of the correct value.

Score
I will run your code on my machine: 8GB RAM, AMD FX(tm)-8350 Eight-Core Processor running Ubuntu 16.04.6 LTS.

I will test for n=50,100,150,200,250,300,350,400,...
 until it no longer completes in 10 seconds. I will also limit the RAM used to 6GB using https://github.com/pshved/timeout.

Your score is the highest n
 your code can reach on my computer within the time limit. If there is a tie, the first answer wins.

Notes
Your code does not need to be deterministic. That is random sampling methods are allowed as long as they give the right answer at least 9 times out of the first 10 times I test them.

"""

import numpy as np
from scipy.special import erfc

"""

Based on @Anders Kaseorg solution

"""

def approximate(n):
    k = n*n//4
    a = np.array([1])
    for i in range(1, n + 1):
        a = np.cumsum((np.r_[a, np.ones(i)] - np.r_[np.zeros(i), a])[:-1] / i)
    return a[k]

def main():
    for v in [3, 6, 9, 12, 15, 18, 50, 100, 150, 200, 250, 300]:
        print(v, approximate(v))

main()
