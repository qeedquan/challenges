#!/usr/bin/env python3

"""

Challenge
Generate n-1 consecutive composite numbers using this prime gap formula

n!+2,n!+3,...,n!+n

Input

n

Output

Sequence of n-1 consecutive composite numbers.

Example

Input

3

Output

8
9

Test Cases
n
n-1 consecutive composites

3
8
9

5
122
123
124
125

21
51090942171709440002
51090942171709440003
51090942171709440004
51090942171709440005
51090942171709440006
51090942171709440007
51090942171709440008
51090942171709440009
51090942171709440010
51090942171709440011
51090942171709440012
51090942171709440013
51090942171709440014
51090942171709440015
51090942171709440016
51090942171709440017
51090942171709440018
51090942171709440019
51090942171709440020
51090942171709440021

Note
For test cases n>20, the results are very large integers (greater than 64-bit) and will most likely require a language that natively supports large numbers or a 3rd party library to handle them.

"""

from math import *

def composites(n):
    r = []
    x = factorial(n)
    for i in range(n - 1):
        r.append(x + 2 + i)
    return r

def main():
    assert(composites(3) == [8, 9])
    assert(composites(5) == [122, 123, 124, 125])
    assert(composites(21) == [51090942171709440002, 51090942171709440003, 51090942171709440004, 51090942171709440005, 51090942171709440006, 51090942171709440007, 51090942171709440008, 51090942171709440009, 51090942171709440010, 51090942171709440011, 51090942171709440012, 51090942171709440013, 51090942171709440014, 51090942171709440015, 51090942171709440016, 51090942171709440017, 51090942171709440018, 51090942171709440019, 51090942171709440020, 51090942171709440021])

main()
