#!/usr/bin/env python3

"""

Challenge
This challenge is pretty simple: Output the total number of possible Tweets. Given the fact that 1,114,112 Unicode characters exist, and Tweets can be up to 280 characters long, we calculate this number like so:

Sum[i=1, 280] 1,114,112^i

Calculated, this number becomes:

13806352273767118967309446652268353719030666987497438863889357319392349204238070937934701588382252733861344864045882375396168022346806583217340072802259387083359555134466517197703380759356965846365156977627360473773588169473731316369188960207815543356617430699549282184606847903882093344681639583363887920162736670339584230464092411246928128751923029979554646202579157612845521194257627831816510188786486205364038342997992390163377307319320795770580125829871827813635107055402218833285288428245530361070090385299410480471800097379723938710176776857154693492888113262310774952935141264656128106489715644469204223123574077687056241600407855644698999923182052787491366956979702291906138690639325270704272468782453957210692358210530379637285511395582363214078004388847219660731573151720107026864311541883029164798133330444260768597550725802772979408391647537342929574104808498797769614795400908507365237326804077132929339660443550229992211585154931729238484097424201567163596712698594520366545693861474171972272416897768579601352059483077847068448856472837079895280084051348757113747847034093121500403990822456362331568718364029903237356710927604336216180583115812490741333484187646966386074557181286407949971654502112671681454373869734610539296783900783568039838348725239932066066987739369537132033298306852573056479318562759091086979441683964087623025801925326064609304055115943692782207092740008073169526779422072953119459819275895282587278291133892079932466034984180041060600579941010427931676118356402267755461169199685582252347150686196242972686980783271232177904787906691872492956841276422272710260778534487171700075108866361285159161816004238666402986057371469198754307817645454320666214400

Rules
You may output a float with only zeros after the decimal point.
Standard loopholes are forbidden.
Trailing whitespace is allowed.
If possible, please link to an online interpreter (e.g. TIO) to run your program on.
Please explain your answer. This is not necessary, but it makes it easier for others to understand.
Languages newer than the question are allowed. This means you could create your own language where the empty program calculates this number, but don't expect any upvotes.
This is code-golf, so shortest code in bytes wins!


"""

def tweets():
    r = 0
    for i in range(1, 281):
        r += 1114112**i
    return r

def main():
    assert(tweets() == 13806352273767118967309446652268353719030666987497438863889357319392349204238070937934701588382252733861344864045882375396168022346806583217340072802259387083359555134466517197703380759356965846365156977627360473773588169473731316369188960207815543356617430699549282184606847903882093344681639583363887920162736670339584230464092411246928128751923029979554646202579157612845521194257627831816510188786486205364038342997992390163377307319320795770580125829871827813635107055402218833285288428245530361070090385299410480471800097379723938710176776857154693492888113262310774952935141264656128106489715644469204223123574077687056241600407855644698999923182052787491366956979702291906138690639325270704272468782453957210692358210530379637285511395582363214078004388847219660731573151720107026864311541883029164798133330444260768597550725802772979408391647537342929574104808498797769614795400908507365237326804077132929339660443550229992211585154931729238484097424201567163596712698594520366545693861474171972272416897768579601352059483077847068448856472837079895280084051348757113747847034093121500403990822456362331568718364029903237356710927604336216180583115812490741333484187646966386074557181286407949971654502112671681454373869734610539296783900783568039838348725239932066066987739369537132033298306852573056479318562759091086979441683964087623025801925326064609304055115943692782207092740008073169526779422072953119459819275895282587278291133892079932466034984180041060600579941010427931676118356402267755461169199685582252347150686196242972686980783271232177904787906691872492956841276422272710260778534487171700075108866361285159161816004238666402986057371469198754307817645454320666214400)

main()
