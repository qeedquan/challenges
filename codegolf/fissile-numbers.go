/*

I found this sequence while working on Evolution of OEIS, but never got around to posting it as an answer. After writing a reference implementation in Mathematica, I thought this is a fun exercise to do as a separate challenge though, so here we go.

Let's build a numeric fission reactor! Consider a positive integer N. As an example, we'll look at 24. To fission this number, we have to find the largest number of consecutive positive integers that sum to N. In this case, that's 7 + 8 + 9 = 24. So we've split 24 into three new numbers. But this wouldn't be much of a fission reactor without chain reactions. So let's recursively repeat the process for these components:

       24
       /|\
      / | \
     /  |  \
    7   8   9
   / \     /|\
  3   4   / | \
 / \     /  |  \
1   2   2   3   4
           / \
          1   2
Notice that we stop the process whenever the number cannot be decomposed into smaller consecutive integers. Also note that we could have written 9 as 4 + 5, but 2 + 3 + 4 has more components. The Fission number of N is now defined as the number of integers obtained in this process, including N itself. The above tree has 13 nodes, so F(24) = 13.

This sequence is OEIS entry A256504.

The first 40 terms, starting from N = 1, are

1, 1, 3, 1, 5, 6, 5, 1, 6, 7, 12, 10, 12, 11, 12, 1, 8, 16, 14, 17, 18, 18,
23, 13, 21, 18, 22, 23, 24, 19, 14, 1, 22, 20, 23, 24, 31, 27, 25, 26
The first 1000 terms can be found in this pastebin.

The Challenge
Given a positive integer N, determine its Fission number F(N). (So you don't need to cover the leading 0 listed on OEIS.)

You may write a program or function, taking input via STDIN (or closest alternative), command-line argument or function argument and outputting the result via STDOUT (or closest alternative), function return value or function (out) parameter.

This is code golf, so the shortest answer (in bytes) wins.

Bonus question: Can you find any interesting properties of this sequence?

*/

package main

func main() {
	tab := []int{
		0, 1, 1, 3, 1, 5, 6, 5, 1, 6, 7, 12, 10, 12, 11, 12, 1, 8, 16, 14, 17,
		18, 18, 23, 13, 21, 18, 22, 23, 24, 19, 14, 1, 22, 20, 23, 24, 31,
		27, 25, 26, 36, 28, 37, 29, 30, 42, 37, 22, 32, 37, 38, 35, 41, 36,
		37, 43, 42, 37, 44, 44, 34, 33, 47, 1, 48, 49, 43, 53, 59, 54, 48,
		54, 56, 56, 57, 60, 58, 59, 52, 49, 65, 68, 65, 65, 66, 77, 55, 69,
		60, 70, 71, 72, 61, 76, 76, 38, 55, 67, 77, 72, 76, 80, 74, 81, 82,
		85, 78, 73, 74, 88, 75, 75, 86, 89, 78, 83, 92, 81, 93, 94, 84, 59,
		107, 85, 81, 89, 49, 1, 104, 90, 98, 86, 93, 67, 94, 95, 113, 92,
		114, 98, 112, 99, 97, 102, 104, 106, 98, 105, 114, 101, 118, 102,
		103, 110, 114, 108, 112, 115, 122, 77, 113, 111, 134, 128, 114, 128,
		131, 117, 116, 118, 119, 141, 133, 127, 122, 132, 104, 139, 131, 127,
		142, 128, 104, 128, 139, 139, 131, 151, 132, 133, 115, 97, 94, 129,
		139, 157, 145, 150, 150, 144, 105, 143, 146, 145, 150, 152, 148, 157,
		149, 150, 168, 164, 148, 150, 167, 157, 163, 158, 151, 162, 162, 164,
		151, 124, 163, 160, 176, 166, 168, 167, 168, 169, 176, 174, 188, 144,
		174, 175, 188, 186, 179, 189, 180, 146, 186, 180, 181, 187, 182, 184,
		171, 185, 186, 130, 192, 1, 106, 190, 195, 191, 198, 142, 185, 199,
		196, 203, 204, 155, 162, 204, 190, 200, 207, 210, 208, 209, 207, 215,
		205, 214, 211, 228, 212, 174, 211, 213, 213, 171, 220, 216, 209, 199,
		205, 217, 185, 225, 220, 230, 221, 222, 225, 232, 206, 226, 187, 232,
		214, 201, 220, 232, 223, 235, 221, 219, 237, 235, 238, 215, 238, 179,
		231, 241, 239, 242, 243, 248, 235, 248, 255, 244, 243, 239, 254, 265,
		206, 250, 234, 232, 240, 258, 255, 260, 261, 260, 256, 268, 261, 259,
		250, 260, 261, 224, 237, 221, 214, 262, 266, 271, 259, 268, 277, 274,
		272, 239, 236, 232, 233, 277, 282, 283, 254, 278, 271, 279, 281, 270,
		282, 283, 266, 294, 213, 246, 213, 155, 289, 237, 291, 274, 269, 301,
		295, 270, 242, 272, 287, 300, 301, 293, 307, 301, 250, 254, 304, 279,
		305, 306, 308, 271, 296, 313, 307, 279, 268, 313, 312, 269, 312, 305,
		300, 319, 319, 327, 283, 288, 324, 269, 276, 310, 325, 315, 325, 328,
		321, 329, 330, 310, 327, 278, 314, 297, 327, 304, 327, 332, 320, 325,
		342, 256, 288, 338, 334, 325, 347, 329, 343, 305, 335, 337, 344, 340,
		336, 347, 338, 348, 349, 335, 351, 341, 302, 316, 344, 317, 328, 337,
		346, 321, 327, 353, 375, 315, 352, 331, 335, 345, 344, 357, 327, 326,
		365, 358, 367, 341, 361, 335, 362, 363, 321, 373, 367, 342, 407, 305,
		357, 336, 358, 350, 347, 300, 323, 336, 334, 1, 353, 245, 359, 357,
		348, 358, 393, 341, 390, 359, 341, 334, 362, 368, 363, 364, 358, 359,
		362, 366, 364, 382, 379, 356, 398, 350, 359, 369, 395, 370, 404, 354,
		391, 375, 418, 409, 369, 377, 380, 371, 401, 418, 381, 417, 421, 384,
		383, 385, 386, 424, 440, 381, 394, 407, 384, 381, 386, 393, 425, 409,
		374, 389, 393, 353, 392, 384, 390, 395, 418, 417, 391, 387, 400, 414,
		423, 395, 401, 404, 386, 404, 446, 405, 406, 449, 428, 403, 444, 405,
		448, 407, 405, 453, 417, 431, 433, 413, 412, 413, 417, 414, 447, 430,
		418, 416, 422, 443, 453, 423, 424, 445, 447, 424, 426, 450, 427, 469,
		428, 429, 473, 439, 474, 427, 397, 430, 436, 431, 432, 334, 411, 445,
		473, 442, 436, 442, 482, 448, 444, 441, 442, 490, 484, 467, 422, 447,
		440, 455, 500, 448, 488, 502, 451, 470, 452, 453, 461, 511, 488, 455,
		466, 459, 485, 483, 462, 480, 473, 465, 482, 461, 487, 467, 516, 468,
		466, 475, 504, 473, 466, 480, 525, 528, 478, 524, 521, 482, 479, 515,
		517, 482, 522, 483, 484, 456, 488, 498, 502, 496, 436, 480, 475, 513,
		489, 488, 481, 536, 504, 540, 528, 494, 510, 496, 519, 535, 500, 500,
		512, 523, 492, 504, 505, 508, 466, 500, 506, 514, 507, 509, 566, 510,
		511, 504, 533, 513, 555, 561, 529, 537, 526, 524, 552, 514, 413, 514,
		550, 517, 550, 532, 519, 507, 508, 493, 523, 523, 525, 440, 532, 300,
		445, 530, 432, 523, 529, 531, 533, 561, 534, 520, 535, 536, 543, 537,
		540, 539, 590, 514, 515, 542, 539, 526, 549, 540, 561, 590, 550, 540,
		601, 545, 545, 560, 578, 543, 559, 555, 551, 562, 549, 576, 585, 556,
		612, 556, 555, 557, 625, 569, 560, 594, 561, 562, 621, 569, 587, 583,
		575, 570, 582, 579, 626, 568, 625, 547, 576, 579, 632, 601, 578, 625,
		620, 581, 582, 632, 613, 628, 590, 587, 573, 590, 623, 597, 592, 593,
		546, 598, 593, 602, 636, 596, 641, 597, 598, 638, 654, 604, 667, 646,
		603, 605, 587, 599, 615, 593, 629, 595, 604, 602, 593, 634, 630, 615,
		625, 609, 632, 627, 611, 640, 660, 615, 589, 637, 627, 639, 620, 663,
		678, 513, 621, 599, 622, 624, 634, 625, 626, 582, 688, 669, 677, 667,
		648, 640, 649, 634, 617, 678, 629, 660, 612, 641, 685, 625, 656, 673,
		638, 644, 646, 681, 664, 662, 698, 641, 652, 697, 663, 708, 656, 657,
		644, 669, 682, 658, 661, 711, 661, 652, 662, 663, 666, 648, 647, 650,
		648, 604, 649, 669, 666, 694, 664, 729, 659, 637, 671, 670, 665, 696,
		671, 674, 681, 633, 675, 691, 702, 670, 686, 702, 681, 683, 692, 740,
		694, 686, 682, 694, 709, 687, 692, 691, 690, 698, 691, 692, 726, 707,
		753, 688, 697, 677, 741, 725, 699, 683,
	}

	for i, v := range tab {
		assert(fission(i) == v)
	}
}

func assert(x bool) {
	if !x {
		panic("assertion failed")
	}
}

// https://oeis.org/A256504
func fission(n int) int {
	if n < 1 {
		return 0
	}

	r := 1
	for i := 0; i < n; i++ {
		for j := 0; j < n; j++ {
			if i*i+i-j*j-j == 2*n {
				for k := j + 1; k <= i; k++ {
					r += fission(k)
				}
				j, i = n, n
			}
		}
	}
	return r
}
