/*

Background
The look-and-say sequence begins with 1, each following term is generated by looking at the previous and reading each group of the same digit (eg. 111 is three ones, so 111 -> 31).
The first few terms are 1,11,21,1211,111221,312211,â€¦
Conway's cosmological theorem says that from any starting point, the sequence eventually becomes a sequence of "atomic elements", which are finite subsequences that never again interact with their neighbors.
There are 92 such elements.

See also: Wikipedia, OEIS

The Challenge
In this challenge you will take no input and you must output all 92 of Conway's atomic elements. The output may be in any order, and of any reasonable form for a list of numbers.

This is code-golf, so the shortest answer wins.

Sample Output:

22
13112221133211322112211213322112
312211322212221121123222112
111312211312113221133211322112211213322112
1321132122211322212221121123222112
3113112211322112211213322112
111312212221121123222112
132112211213322112
31121123222112
111213322112
123222112
3113322112
1113222112
1322112
311311222112
1113122112
132112
3112
1112
12
3113112221133112
11131221131112
13211312
31132
111311222112
13122112
32112
11133112
131112
312
13221133122211332
31131122211311122113222
11131221131211322113322112
13211321222113222112
3113112211322112
11131221222112
1321122112
3112112
1112133
12322211331222113112211
1113122113322113111221131221
13211322211312113211
311322113212221
132211331222113112211
311311222113111221131221
111312211312113211
132113212221
3113112211
11131221
13211
3112221
1322113312211
311311222113111221
11131221131211
13211321
311311
11131
1321133112
31131112
111312
132
311332
1113222
13221133112
3113112221131112
111312211312
1321132
311311222
11131221133112
1321131112
311312
11132
13112221133211322112211213322113
312211322212221121123222113
111312211312113221133211322112211213322113
1321132122211322212221121123222113
3113112211322112211213322113
111312212221121123222113
132112211213322113
31121123222113
111213322113
123222113
3113322113
1113222113
1322113
311311222113
1113122113
132113
3113
1113
13
3

*/

package main

import (
	"fmt"
	"math/big"
)

func main() {
	for i := 0; i < 92; i++ {
		fmt.Println(atomic(i))
	}
}

// https://oeis.org/A119566
func atomic(n int) *big.Int {
	tab := []*big.Int{
		xint("22"),
		xint("13112221133211322112211213322112"),
		xint("312211322212221121123222112"),
		xint("111312211312113221133211322112211213322112"),
		xint("1321132122211322212221121123222112"),
		xint("3113112211322112211213322112"),
		xint("111312212221121123222112"),
		xint("132112211213322112"),
		xint("31121123222112"),
		xint("111213322112"),
		xint("123222112"),
		xint("3113322112"),
		xint("1113222112"),
		xint("1322112"),
		xint("311311222112"),
		xint("1113122112"),
		xint("132112"),
		xint("3112"),
		xint("1112"),
		xint("12"),
		xint("3113112221133112"),
		xint("11131221131112"),
		xint("13211312"),
		xint("31132"),
		xint("111311222112"),
		xint("13122112"),
		xint("32112"),
		xint("11133112"),
		xint("131112"),
		xint("312"),
		xint("13221133122211332"),
		xint("31131122211311122113222"),
		xint("11131221131211322113322112"),
		xint("13211321222113222112"),
		xint("3113112211322112"),
		xint("11131221222112"),
		xint("1321122112"),
		xint("3112112"),
		xint("1112133"),
		xint("12322211331222113112211"),
		xint("1113122113322113111221131221"),
		xint("13211322211312113211"),
		xint("311322113212221"),
		xint("132211331222113112211"),
		xint("311311222113111221131221"),
		xint("111312211312113211"),
		xint("132113212221"),
		xint("3113112211"),
		xint("11131221"),
		xint("13211"),
		xint("3112221"),
		xint("1322113312211"),
		xint("311311222113111221"),
		xint("11131221131211"),
		xint("13211321"),
		xint("311311"),
		xint("11131"),
		xint("1321133112"),
		xint("31131112"),
		xint("111312"),
		xint("132"),
		xint("311332"),
		xint("1113222"),
		xint("13221133112"),
		xint("3113112221131112"),
		xint("111312211312"),
		xint("1321132"),
		xint("311311222"),
		xint("11131221133112"),
		xint("1321131112"),
		xint("311312"),
		xint("11132"),
		xint("13112221133211322112211213322113"),
		xint("312211322212221121123222113"),
		xint("111312211312113221133211322112211213322113"),
		xint("1321132122211322212221121123222113"),
		xint("3113112211322112211213322113"),
		xint("111312212221121123222113"),
		xint("132112211213322113"),
		xint("31121123222113"),
		xint("111213322113"),
		xint("123222113"),
		xint("3113322113"),
		xint("1113222113"),
		xint("1322113"),
		xint("311311222113"),
		xint("1113122113"),
		xint("132113"),
		xint("3113"),
		xint("1113"),
		xint("13"),
		xint("3"),
	}

	if n < 0 || n >= len(tab) {
		return big.NewInt(0)
	}
	return tab[n]
}

func xint(s string) *big.Int {
	x := new(big.Int)
	x.SetString(s, 0)
	return x
}
