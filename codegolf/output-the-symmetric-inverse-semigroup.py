#!/usr/bin/env python3

"""

The symmetric inverse semigroup is a very important object in the study of semigroups, for a number of reasons, but most obviously due to the Wagner-Preston theorem.
In brief, for any set X, the symmetric inverse semigroup I[X] is the set of all injective partial maps (equipped with composition).

Partial maps
Given some sets X,Y, a partial map f:X⇀Y is a function from some subset S⊂X to Y, where the map is undefined for elements of X not in S.
For example, letting X=Y={1,2,3,4,5}, we might have the partial function

f(1)=3
f(3)=3
f(4)=1
f(5)=2

This isn't a function, as f(2) is undefined.

For partial maps between these range sets - sets of the form {1,2,...,n} - we can write them in "permutation" notation:
f = [ 1 3 4 5 ]
    [ 3 3 1 2 ]

An injective partial map is one where, so long as f(x),f(y) are defined, we have that f(x)≠f(y) when x≠y.
Our example above is not injective, as f(1)=f(3).

Symmetric inverse semigroup
Instead of considering I[X] for some arbitrary set, we'll instead look at In=I{1,2,...,n}.
In this case, all elements of I[n] can be written in this permutation notation. A comprehensive description of each element can be seen as:

The empty map, ∅ or 0
For each integer 1≤i≤n, take i distinct numbers from {1,2,...,n}, I, and list all maps from I⇀{1,2,...,n}.

Task
Given a positive integer n, output I[n].

You may choose any reasonable format to output each mapping in the set, such as a pair of lists [inputs, outputs] or a list of pairs [input, output], so long as the inputs, outputs and associations are unambiguous.
You may choose any unambigous formatting for the empty set, such as [], 0, [[], []] etc.

This is code-golf, so the shortest code in byes wins in each language.

Test cases
The first 4 input/output pairs are given below, using lists of [[input1, input2, ...], [output1, output2, ...]] notation.

1 -> [[[], []], [[1], [1]]]
2 -> [[[], []], [[1], [1]], [[1], [2]], [[2], [1]], [[2], [2]], [[1, 2], [1, 2]], [[1, 2], [2, 1]]]
3 -> [[[], []], [[1], [1]], [[1], [2]], [[1], [3]], [[2], [1]], [[2], [2]], [[2], [3]], [[3], [1]], [[3], [2]], [[3], [3]], [[1, 2], [1, 2]], [[1, 2], [1, 3]], [[1, 2], [2, 1]], [[1, 2], [2, 3]], [[1, 2], [3, 1]], [[1, 2], [3, 2]], [[1, 3], [1, 2]], [[1, 3], [1, 3]], [[1, 3], [2, 1]], [[1, 3], [2, 3]], [[1, 3], [3, 1]], [[1, 3], [3, 2]], [[2, 3], [1, 2]], [[2, 3], [1, 3]], [[2, 3], [2, 1]], [[2, 3], [2, 3]], [[2, 3], [3, 1]], [[2, 3], [3, 2]], [[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 3, 2]], [[1, 2, 3], [2, 1, 3]], [[1, 2, 3], [2, 3, 1]], [[1, 2, 3], [3, 1, 2]], [[1, 2, 3], [3, 2, 1]]]
4 -> [[[], []], [[1], [1]], [[1], [2]], [[1], [3]], [[1], [4]], [[2], [1]], [[2], [2]], [[2], [3]], [[2], [4]], [[3], [1]], [[3], [2]], [[3], [3]], [[3], [4]], [[4], [1]], [[4], [2]], [[4], [3]], [[4], [4]], [[1, 2], [1, 2]], [[1, 2], [1, 3]], [[1, 2], [1, 4]], [[1, 2], [2, 1]], [[1, 2], [2, 3]], [[1, 2], [2, 4]], [[1, 2], [3, 1]], [[1, 2], [3, 2]], [[1, 2], [3, 4]], [[1, 2], [4, 1]], [[1, 2], [4, 2]], [[1, 2], [4, 3]], [[1, 3], [1, 2]], [[1, 3], [1, 3]], [[1, 3], [1, 4]], [[1, 3], [2, 1]], [[1, 3], [2, 3]], [[1, 3], [2, 4]], [[1, 3], [3, 1]], [[1, 3], [3, 2]], [[1, 3], [3, 4]], [[1, 3], [4, 1]], [[1, 3], [4, 2]], [[1, 3], [4, 3]], [[1, 4], [1, 2]], [[1, 4], [1, 3]], [[1, 4], [1, 4]], [[1, 4], [2, 1]], [[1, 4], [2, 3]], [[1, 4], [2, 4]], [[1, 4], [3, 1]], [[1, 4], [3, 2]], [[1, 4], [3, 4]], [[1, 4], [4, 1]], [[1, 4], [4, 2]], [[1, 4], [4, 3]], [[2, 3], [1, 2]], [[2, 3], [1, 3]], [[2, 3], [1, 4]], [[2, 3], [2, 1]], [[2, 3], [2, 3]], [[2, 3], [2, 4]], [[2, 3], [3, 1]], [[2, 3], [3, 2]], [[2, 3], [3, 4]], [[2, 3], [4, 1]], [[2, 3], [4, 2]], [[2, 3], [4, 3]], [[2, 4], [1, 2]], [[2, 4], [1, 3]], [[2, 4], [1, 4]], [[2, 4], [2, 1]], [[2, 4], [2, 3]], [[2, 4], [2, 4]], [[2, 4], [3, 1]], [[2, 4], [3, 2]], [[2, 4], [3, 4]], [[2, 4], [4, 1]], [[2, 4], [4, 2]], [[2, 4], [4, 3]], [[3, 4], [1, 2]], [[3, 4], [1, 3]], [[3, 4], [1, 4]], [[3, 4], [2, 1]], [[3, 4], [2, 3]], [[3, 4], [2, 4]], [[3, 4], [3, 1]], [[3, 4], [3, 2]], [[3, 4], [3, 4]], [[3, 4], [4, 1]], [[3, 4], [4, 2]], [[3, 4], [4, 3]], [[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 4]], [[1, 2, 3], [1, 3, 2]], [[1, 2, 3], [1, 3, 4]], [[1, 2, 3], [1, 4, 2]], [[1, 2, 3], [1, 4, 3]], [[1, 2, 3], [2, 1, 3]], [[1, 2, 3], [2, 1, 4]], [[1, 2, 3], [2, 3, 1]], [[1, 2, 3], [2, 3, 4]], [[1, 2, 3], [2, 4, 1]], [[1, 2, 3], [2, 4, 3]], [[1, 2, 3], [3, 1, 2]], [[1, 2, 3], [3, 1, 4]], [[1, 2, 3], [3, 2, 1]], [[1, 2, 3], [3, 2, 4]], [[1, 2, 3], [3, 4, 1]], [[1, 2, 3], [3, 4, 2]], [[1, 2, 3], [4, 1, 2]], [[1, 2, 3], [4, 1, 3]], [[1, 2, 3], [4, 2, 1]], [[1, 2, 3], [4, 2, 3]], [[1, 2, 3], [4, 3, 1]], [[1, 2, 3], [4, 3, 2]], [[1, 2, 4], [1, 2, 3]], [[1, 2, 4], [1, 2, 4]], [[1, 2, 4], [1, 3, 2]], [[1, 2, 4], [1, 3, 4]], [[1, 2, 4], [1, 4, 2]], [[1, 2, 4], [1, 4, 3]], [[1, 2, 4], [2, 1, 3]], [[1, 2, 4], [2, 1, 4]], [[1, 2, 4], [2, 3, 1]], [[1, 2, 4], [2, 3, 4]], [[1, 2, 4], [2, 4, 1]], [[1, 2, 4], [2, 4, 3]], [[1, 2, 4], [3, 1, 2]], [[1, 2, 4], [3, 1, 4]], [[1, 2, 4], [3, 2, 1]], [[1, 2, 4], [3, 2, 4]], [[1, 2, 4], [3, 4, 1]], [[1, 2, 4], [3, 4, 2]], [[1, 2, 4], [4, 1, 2]], [[1, 2, 4], [4, 1, 3]], [[1, 2, 4], [4, 2, 1]], [[1, 2, 4], [4, 2, 3]], [[1, 2, 4], [4, 3, 1]], [[1, 2, 4], [4, 3, 2]], [[1, 3, 4], [1, 2, 3]], [[1, 3, 4], [1, 2, 4]], [[1, 3, 4], [1, 3, 2]], [[1, 3, 4], [1, 3, 4]], [[1, 3, 4], [1, 4, 2]], [[1, 3, 4], [1, 4, 3]], [[1, 3, 4], [2, 1, 3]], [[1, 3, 4], [2, 1, 4]], [[1, 3, 4], [2, 3, 1]], [[1, 3, 4], [2, 3, 4]], [[1, 3, 4], [2, 4, 1]], [[1, 3, 4], [2, 4, 3]], [[1, 3, 4], [3, 1, 2]], [[1, 3, 4], [3, 1, 4]], [[1, 3, 4], [3, 2, 1]], [[1, 3, 4], [3, 2, 4]], [[1, 3, 4], [3, 4, 1]], [[1, 3, 4], [3, 4, 2]], [[1, 3, 4], [4, 1, 2]], [[1, 3, 4], [4, 1, 3]], [[1, 3, 4], [4, 2, 1]], [[1, 3, 4], [4, 2, 3]], [[1, 3, 4], [4, 3, 1]], [[1, 3, 4], [4, 3, 2]], [[2, 3, 4], [1, 2, 3]], [[2, 3, 4], [1, 2, 4]], [[2, 3, 4], [1, 3, 2]], [[2, 3, 4], [1, 3, 4]], [[2, 3, 4], [1, 4, 2]], [[2, 3, 4], [1, 4, 3]], [[2, 3, 4], [2, 1, 3]], [[2, 3, 4], [2, 1, 4]], [[2, 3, 4], [2, 3, 1]], [[2, 3, 4], [2, 3, 4]], [[2, 3, 4], [2, 4, 1]], [[2, 3, 4], [2, 4, 3]], [[2, 3, 4], [3, 1, 2]], [[2, 3, 4], [3, 1, 4]], [[2, 3, 4], [3, 2, 1]], [[2, 3, 4], [3, 2, 4]], [[2, 3, 4], [3, 4, 1]], [[2, 3, 4], [3, 4, 2]], [[2, 3, 4], [4, 1, 2]], [[2, 3, 4], [4, 1, 3]], [[2, 3, 4], [4, 2, 1]], [[2, 3, 4], [4, 2, 3]], [[2, 3, 4], [4, 3, 1]], [[2, 3, 4], [4, 3, 2]], [[1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4], [1, 2, 4, 3]], [[1, 2, 3, 4], [1, 3, 2, 4]], [[1, 2, 3, 4], [1, 3, 4, 2]], [[1, 2, 3, 4], [1, 4, 2, 3]], [[1, 2, 3, 4], [1, 4, 3, 2]], [[1, 2, 3, 4], [2, 1, 3, 4]], [[1, 2, 3, 4], [2, 1, 4, 3]], [[1, 2, 3, 4], [2, 3, 1, 4]], [[1, 2, 3, 4], [2, 3, 4, 1]], [[1, 2, 3, 4], [2, 4, 1, 3]], [[1, 2, 3, 4], [2, 4, 3, 1]], [[1, 2, 3, 4], [3, 1, 2, 4]], [[1, 2, 3, 4], [3, 1, 4, 2]], [[1, 2, 3, 4], [3, 2, 1, 4]], [[1, 2, 3, 4], [3, 2, 4, 1]], [[1, 2, 3, 4], [3, 4, 1, 2]], [[1, 2, 3, 4], [3, 4, 2, 1]], [[1, 2, 3, 4], [4, 1, 2, 3]], [[1, 2, 3, 4], [4, 1, 3, 2]], [[1, 2, 3, 4], [4, 2, 1, 3]], [[1, 2, 3, 4], [4, 2, 3, 1]], [[1, 2, 3, 4], [4, 3, 1, 2]], [[1, 2, 3, 4], [4, 3, 2, 1]]]
Additionally, this is a Jelly program (spoilers for Jelly, 14 bytes) that generated the above test cases (up to formatting).

"""

from itertools import *

"""

https://oeis.org/A002720 (set size)

ported from @Ajax1234 solution


"""

def symmetric_inverse_semigroup(n):
    t = [*range(1, n + 1)]
    return [0]+ [[j, k] for i in t for k in permutations(t, i) for j in combinations(t, i)]

def main():
    tab = [1, 2, 7, 34, 209, 1546, 13327, 130922, 1441729]
    for i in range(len(tab)):
        assert(len(symmetric_inverse_semigroup(i)) == tab[i])

main()

