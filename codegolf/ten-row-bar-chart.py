#!/usr/bin/env python3

"""

This is Hole-1 from The Autumn Tournament of APL CodeGolf. I am the original author of the problem there, and thus allowed to re-post it here.

Given a list of numbers, produce a horizontal bar chart of # characters for how many numbers fit into each of ten equal-sized groups. For example, if the data ranges from 0-100, the ranges will be 0–9.9, 10–19.9, …, 90–100. (Formally, [0,10), [10,20), …, [90,100].). You may assume that there will be at least two numbers and that not all numbers will be the same.

Examples:
[1,0,0,0,0,0,0,0,0,0] gives:

#########








#
[0,1,2,3,4,5,6,7,8,9] gives:

#
#
#
#
#
#
#
#
#
#
[0,1,2,3,4,5,6,7,8,9,10] gives:

#
#
#
#
#
#
#
#
#
##
[0,1,2,3,4,5,6,7,8,9,10,11] gives:

##
#
#
#
#
#
#
#
#
##
[0,-0.5,-1,-1.5,-2,-2.5,-3,-3.5,-4,-4.5,0.5,0,-0.5,-1,-1.5,-2,-2.5,-3,-3.5,-4,1,0.5,0,-0.5,-1,-1.5,-2,-2.5,-3,-3.5,1.5,1,0.5,0,-0.5,-1,-1.5,-2,-2.5,-3,2,1.5,1,0.5,0,-0.5,-1,-1.5,-2,-2.5,2.5,2,1.5,1,0.5,0,-0.5,-1,-1.5,-2,3,2.5,2,1.5,1,0.5,0,-0.5,-1,-1.5,3.5,3,2.5,2,1.5,1,0.5,0,-0.5,-1,4,3.5,3,2.5,2,1.5,1,0.5,0,-0.5,4.5,4,3.5,3,2.5,2,1.5,1,0.5,0] gives:

###
#######
###########
###############
#########
###################
###############
###########
#######
###
[9014,9082,9077,9068,8866,8710,9049,8364,8867,9015,9064,9023,9024,8804,8805,8800,8744,8743,8714,9076,8593,8595,9075,9675,8968,8970,8711,8728,8834,8835,8745,8746,8869,8868,9073,9074,9042,9035,9033,9021,8854,9055,9017,9045,9038,9067,9066,8801,8802,9496,9488,9484,9492,9532,9472,9500,9508,9524,9516,9474,8739,9079,8900,8592,8594,9053,9109,9054,9059] gives:

#
####
#########
############
######
#########################


###########
#
[0,8,10,13,32,12,6,7,27,9,37,39,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,1,2,175,46,48,49,50,51,52,53,54,55,56,57,3,165,36,163,162,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,4,5,253,183,127,193,194,195,199,200,202,203,204,205,206,207,208,210,211,212,213,217,218,219,221,254,227,236,240,242,245,123,125,168,192,196,197,198,201,209,214,216,220,223,224,225,226,228,229,230,231,232,233,234,235,237,238,239,241,91,47,92,60,61,62,45,43,247,215,63,126,42,40,124,59,44,33,243,244,246,248,34,35,30,38,180,64,249,250,251,94,252,96,182,58,191,161,41,93,31,160,167] gives:

#############
######################
##########################
#########################
#########################
#
########
################
########################
##########################

"""

def barchart(a, g=10):
    v0 = min(a)
    v1 = max(a)
    r = [0] * g
    for v in a:
        n = ((v - v0) / (v1 - v0))
        n = min(int(n * g), g - 1)
        r[n] += 1

    print(r)
    for n in r:
        print('#' * n)
    print()

    return r

def main():
    barchart([1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    barchart([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    barchart([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
    barchart([0, -0.5, -1, -1.5, -2, -2.5, -3, -3.5, -4, -4.5, 0.5, 0, -0.5, -1, -1.5, -2, -2.5, -3, -3.5, -4, 1, 0.5, 0, -0.5, -1, -1.5, -2, -2.5, -3, -3.5, 1.5, 1, 0.5, 0, -0.5, -1, -1.5, -2, -2.5, -3, 2, 1.5, 1, 0.5, 0, -0.5, -1, -1.5, -2, -2.5, 2.5, 2, 1.5, 1, 0.5, 0, -0.5, -1, -1.5, -2, 3, 2.5, 2, 1.5, 1, 0.5, 0, -0.5, -1, -1.5, 3.5, 3, 2.5, 2, 1.5, 1, 0.5, 0, -0.5, -1, 4, 3.5, 3, 2.5, 2, 1.5, 1, 0.5, 0, -0.5, 4.5, 4, 3.5, 3, 2.5, 2, 1.5, 1, 0.5, 0])
    barchart([9014, 9082, 9077, 9068, 8866, 8710, 9049, 8364, 8867, 9015, 9064, 9023, 9024, 8804, 8805, 8800, 8744, 8743, 8714, 9076, 8593, 8595, 9075, 9675, 8968, 8970, 8711, 8728, 8834, 8835, 8745, 8746, 8869, 8868, 9073, 9074, 9042, 9035, 9033, 9021, 8854, 9055, 9017, 9045, 9038, 9067, 9066, 8801, 8802, 9496, 9488, 9484, 9492, 9532, 9472, 9500, 9508, 9524, 9516, 9474, 8739, 9079, 8900, 8592, 8594, 9053, 9109, 9054, 9059])
    barchart([0, 8, 10, 13, 32, 12, 6, 7, 27, 9, 37, 39, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 1, 2, 175, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 3, 165, 36, 163, 162, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 4, 5, 253, 183, 127, 193, 194, 195, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 217, 218, 219, 221, 254, 227, 236, 240, 242, 245, 123, 125, 168, 192, 196, 197, 198, 201, 209, 214, 216, 220, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 91, 47, 92, 60, 61, 62, 45, 43, 247, 215, 63, 126, 42, 40, 124, 59, 44, 33, 243, 244, 246, 248, 34, 35, 30, 38, 180, 64, 249, 250, 251, 94, 252, 96, 182, 58, 191, 161, 41, 93, 31, 160, 167])

main()
