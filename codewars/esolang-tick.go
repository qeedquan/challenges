/*

Task

Make a custom esolang interpreter for the language Tick. Tick is a descendant of Ticker but also very different data and command-wise.
Syntax/Info

Commands are given in character format. Non-command characters should be ignored. Tick has an potentially infinite memory as opposed to Ticker(which you have a special command to add a new cell) and only has 4 commands(as opposed to 7). Read about this esolang here.
Commands

>: Move data selector right

<: Move data selector left(infinite in both directions)

+: Increment memory cell by 1. 255+1=0

*: Add ascii value of memory cell to the output tape.
Examples

Hello world!



*/

package main

import "fmt"

type Tick struct {
	mem map[int]uint8
	pc  int
}

func main() {
	var tick Tick
	tick.Reset()
	tick.Execute
}

func (t *Tick) Reset() {
	t.mem = make(map[int]uint8)
	t.pc = 0
}

func (t *Tick) Execute(code string) {
	for _, op := range code {
		switch op {
		case '>':
			t.pc++
		case '<':
			t.pc--
		case '+':
			t.mem[t.pc]++
		case '*':
			fmt.Printf("%c", t.mem[t.pc])
		}
	}
}
