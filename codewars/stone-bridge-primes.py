#!/usr/bin/env python3

"""

A special type of prime is generated by the formula p = 2^m * 3^n + 1 where m and n can be any non-negative integer.

The first 5 of these primes are 2, 3, 5, 7, 13, and are generated as follows:

2 = 2^0 * 3^0 + 1
3 = 2^1 * 3^0 + 1
5 = 2^2 * 3^0 + 1
7 = 2^1 * 3^1 + 1
13 = 2^2 * 3^1 + 1
..and so on

You will be given a range and your task is to return the number of primes that have this property. For example, solve(0,15) = 5, because there are only 5 such primes >= 0 and < 15; they are 2,3,5,7,13. The upper limit of the tests will not exceed 1,500,000.

More examples in the test cases.

Good luck!

If you like Prime Katas, you will enjoy this Kata: Simple Prime Streaming ( https://www.codewars.com/kata/5a908da30025e995880000e3 )

"""

from itertools import islice
from sympy import nextprime

# https://oeis.org/A005109
def pierpont():
    p = 2
    while True:
        q = p - 1
        q >>= (~q & (q - 1)).bit_length()
        a, b = divmod(q, 3)
        while not b:
            q = a
            a, b = divmod(a, 3)
        if q == 1:
            yield p
        p = nextprime(p)

# https://oeis.org/A122258
def solve(x, y):
    if x < 0 or y < 0 or y < x:
        return 0

    c = 0
    for p in pierpont():
        if p >= y:
            break
        if x <= p and p < y:
            c += 1
    return c

def main():
    assert(solve(0, 10) == 4)
    assert(solve(0, 15) == 5)
    assert(solve(1, 100) == 10)
    assert(solve(100, 1000) == 8)

main()
