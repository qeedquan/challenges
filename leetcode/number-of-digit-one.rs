/*

Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.

Example 1:

Input: n = 13
Output: 6
Example 2:

Input: n = 0
Output: 0
 

Constraints:

0 <= n <= 10^9

*/

use std::cmp::*;

fn main() {
    let tab = [
        1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13,
        13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18,
        18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20,
        20, 20, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 38, 40, 42, 44, 46, 48, 50, 52,
        53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78,
        79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102,
        103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122,
        123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 140,
        141, 141, 141, 141, 141, 141, 141, 141, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151,
        152, 152, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154,
        154, 154, 154, 154, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 156, 156, 156, 156,
        156, 156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 158, 158,
        158, 158, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
        160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 161, 161, 161, 161, 161, 161, 161, 161,
        161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 172, 173, 173, 173, 173, 173, 173,
        173, 173, 173, 173, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 175, 175, 175, 175,
        175, 175, 175, 175, 175, 175, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 177,
        177, 177, 177, 177, 177, 177, 177, 177, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
        179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 180, 180, 180, 180, 180, 180, 180, 180,
        180, 180, 181, 181, 181, 181, 181, 181, 181, 181, 181, 182, 184, 185, 186, 187, 188, 189,
        190, 191, 192, 192, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 194, 194, 194, 194,
        194, 194, 194, 194, 194, 194, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 196, 196,
        196, 196, 196, 196, 196, 196, 196, 196, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
        198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 199, 199, 199, 199, 199, 199, 199,
        199, 199, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 201, 201, 201, 201, 201, 201,
        201, 201, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 212, 213, 213, 213, 213,
        213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 215, 215,
        215, 215, 215, 215, 215, 215, 215, 215, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
        217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 218, 218, 218, 218, 218, 218, 218, 218,
        218, 218, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 220, 220, 220, 220, 220, 220,
        220, 220, 220, 220, 221, 221, 221, 221, 221, 221, 221, 221, 221, 222, 224, 225, 226, 227,
        228, 229, 230, 231, 232, 232, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 234, 234,
        234, 234, 234, 234, 234, 234, 234, 234, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
        236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 237, 237, 237, 237, 237, 237, 237, 237,
        237, 237, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 239, 239, 239, 239, 239, 239,
        239, 239, 239, 239, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 241, 241, 241, 241,
        241, 241, 241, 241, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 252, 253, 253,
        253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 256, 256, 256, 256, 256, 256, 256, 256,
        256, 256, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 258, 258, 258, 258, 258, 258,
        258, 258, 258, 258, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 260, 260, 260, 260,
        260, 260, 260, 260, 260, 260, 261, 261, 261, 261, 261, 261, 261, 261, 261, 262, 264, 265,
        266, 267, 268, 269, 270, 271, 272, 272, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
        274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 275, 275, 275, 275, 275, 275, 275, 275,
        275, 275, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 277, 277, 277, 277, 277, 277,
        277, 277, 277, 277, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 279, 279, 279, 279,
        279, 279, 279, 279, 279, 279, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 281, 281,
        281, 281, 281, 281, 281, 281, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 292,
        293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 294, 294, 294, 294, 294, 294, 294, 294,
        294, 294, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 296, 296, 296, 296, 296, 296,
        296, 296, 296, 296, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 298, 298, 298, 298,
        298, 298, 298, 298, 298, 298, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 300, 300,
        300, 300, 300, 300, 300, 300, 300, 301,
    ];

    assert_eq!(digitone(13), 6);
    assert_eq!(digitone(0), 0);

    let mut i = 0;
    while i < tab.len() {
        assert_eq!(digitone(i + 1), tab[i]);
        i += 1;
    }
}

// https://oeis.org/A094798
fn digitone(n: usize) -> usize {
    let mut c = 0;
    let mut p = 1;
    while p <= n {
        let d = p * 10;
        let q = n / d;
        let r = n % d;
        if q > 0 {
            c += q * p;
        }
        if r >= p {
            c += min(r - p + 1, p);
        }
        p *= 10;
    }
    return c;
}
