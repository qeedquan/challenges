/*

Given integers L and t, a string Pattern forms an (L, t)-clump inside a (larger) string Genome if there is an interval of Genome of length L in which Pattern appears at least t times.
For example, TGCA forms a (25,3)-clump in the following Genome: gatcagcataagggtcccTGCAATGCATGACAAGCCTGCAgttgttttac.

Clump Finding Problem
Find patterns forming clumps in a string.

Given: A string Genome, and integers k, L, and t.

Return: All distinct k-mers forming (L, t)-clumps in Genome.

Sample Dataset
CGGACTCGACAGATGTGAAGAAATGTGAAGACTGAGTGAAGAGAAGAGGAAACACGACACGACATTGCGACATAATGTACGAATGTAATGTGCCTATGGC
5 75 4

Sample Output
CGACA GAAGA AATGT

*/

package main

import (
	"fmt"
	"reflect"
	"strings"
)

func main() {
	test("CGGACTCGACAGATGTGAAGAAATGTGAAGACTGAGTGAAGAGAAGAGGAAACACGACACGACATTGCGACATAATGTACGAATGTAATGTGCCTATGGC", 5, 75, 4, []string{"CGACA", "GAAGA", "AATGT"})
	test("ACAGCAGACCGACAGGCGAGTTACAACAAGCTGATTCCTAATCATAGCTATGAAGCCAGGAATGGCTTATGAATTTCTTTCATTCAAAAACATAGATGCCGCCCGACGGGTTGATCCAAGCCAACAGAAATGGTAACAAAGCAGCATTACCGTGCGGCGAAATGGACGTATTGTCGGACCTAATTCGCGTATGCTATTATAGCGGGCCAGACACGATACACTGACCCTACTGTTTCGATGCACGACGTACGTTGCAGTGTGAAGATCGGAAGGGAATCTAAATTTTACCAACGAGGATTGGTACGGCGCTCAAAACATAGGGTCTACACCCCGCGAGAAACTACCCCCATTCTCATACGCCGGAGGGTTTTCGGCGAAGATGCGCCCGCAATGAGACTGCATCGTATCCAAACATGTATGTACTAAAAGCAGTGCAGTTGGTGCGTGACTAAAGCGATTACCCTAAATCGTAAATCGCCACCTCAGTCAATCTTACTAAATCGCCACCTCGCCACCACATAAATCGCCACCGCTCGCAGCGTAAATCGCCACCCGGCGTAGGCTGATCTAGAAGTGCCTGTAAATCGCCACCGACATCGTGTTATAAATCGCCACCAATCGCCACCAATAAATCGCCACCGGAACTTCTGGCTAAGAAGTAAATCGCCTAAATCGCCACCCTCACTAAGTTTGACTAAATCGCCACCATAAATCGCCACCCTAAATCGCCACCCACCTGCCACTACGCTTACTTTCAACTTGTTAAATCGCCACCGCCACCTTTATGCCAGTAAATCGCCTAAATCGCCACCGCCACCATCGCCACCGTAAATCGCCACCCCACCCAATCTAAATCGCCACCCACTCGCAGCCGTTTAAATCGTAAATCGTAAATCGCCACCCCCGTGTAATAAATCGCCACCAACAACCGGCGCACACTAAATCGCCACCTGCGGGGTATAAATCGCTAAATCGCCACCCCATAAATCGCCACCCCGTATAAATCGCCACTAAATCGCCACCGAAATTAAATCGCCACCACGTTTACAGTGCTGGGAATCTCATCGCGTAGTCCATGTAAAGCAACATACGGGATTTCATAGCGGAGTAGTATTCATAACTCGGGACCTAAACGCGGAGGTTATATCAGGGAACACTGAGCCCTAGAACAAGGGTATTCGTCTGAAGATTGTCTTGCCCCGTTTCGACGGGCTCGACATCTACTAAAGGGGAGCATTCAAGCCACTGTACTAACGGCTCAAGACACAAGGCGAGCTCGCGGGAGTGGCGGCAGTGCTGTCACAGGCTGCGTGTGCTATCCGCGTATTATCGGCGTCTGCCATATCCCTGGTATCGGCTTAGACATGAAACCGCAACGGAAAATCGTTTCGTTCGGTGTCTTCAGATGCCCAGGATTGGCGTGTTTCACACATTCTTCTAAAGTACAATTCAGAACGGTATTCGACCGACAGCCTTCCGGTACCCCCGCAATCTTTAGATGCGGGGGCTGAGAGGCAAGTGCAACAAGGGGGCCATACTCGTGAATGATAACAACGGAATAGTCTTCCAATTTTTGGATGCCCCTCCATTTAAGTATGATCGGCCGTCGCGGCCTCGTGTGCTGGATAATATAGGTGATAATTCGACAGGGCCGCGCCTACTGAAGTGAGCCAAGACGGAACTTCGAAGTGAGCCAAGAAGGCTAGGGTCTAACCGATCCCGTGGAAGTGAGCCAAGTGAGCCAAGTTCCCGCCAAGTGAGCCAAGCGGGCTTGTGCCTCGAAGTGAGCCAAGCAGTTAACAAGGTACCAATGCGTAACGAAGTGAAGTGAGCCAAGGTTGCTACTCGGAAAGTGAGCCAAGAAAGTGAGCCAAGCTTTCGTCAAGGTGTTGACAAAGTGAGCCAAGACAACCAGTTCTAAATGCAAGTGAGCCAAGGTAAGTGAGCCAAGGCTGCGCGAAGAACGCGGGCAAAGTGAGCCAAGGGAGTAGTCGTAAGTGAGCCAAGAGCCAAGATAGTGCAAGTAAGTGAGCCAAGAGCCAAGGAGCCAAGCACCAAAGTGAGCCAAGAAGTGAGCCAAGCGACTATCCACTCAAGAGGGGAAGTGAGCCAAGGCCAAGGAAGTGAGCCAAGTAAGTGAGCCAAGCTTTTAGGAAAGTGAAGTGAGCCAAGTCACCGGTAAGTGAGCCAAGTGAGCCAAGTCCCAAAGTGAGCCAAGAAGTGAGCCAAGGCCAAGTTGCAAGTCCTTACTCGTCGGACGCTCACGAATTACCCAAAAGTCCTTTAGTGAAGACGTCAATGGGCTAATTCACATGTCGAAAGTTGTCTTTTGGGAATTACAAAATTGTAGGTGGGATTGCCAGATCAATTCGGAGGCGTTCCCTAGTGTCGTCAGAGAGGTTAAGCTGATTGGAGACAACATAAGTAAGTTCGGAGTTCTCCTACTCCGCGTCCCCTTATAGCTTGACCTGATGTCTAAAATGCAGTCTCCGTTAGATTATGCGGTGTAACAACTAATAAACTATATTGCATAGTATGAGAACACGAGGTAAATGCGACTGATCATTCGATCCATTACTTTGGCTCGAAATATCACGCCCTAGCCCTAACCGATCAGTCCATGCGACCTGGGTGATTAAACAGTAGAATATGCCTCAATCCCGTGACTAGGAGTACGGATTCCGCAATGTTTCCAGCCATGTGGTCGAAGGACGTAGAGCGGCGGGTCGATAATCTTTGGTCTAAGCCCATCTGAAGCCGATCACGACGGCTCGAGCAGCCCACAGCAAACCACTAGAGGTGCTGACTAAAGCGGGAGCAAAGTAAAACAACGTGAGCGAACCCTTGGCCCACGTTCCTCATTCCTGTAAATAATACTTAAAGGCACTTAACTTGATACCGCACTCTCCGTATAATGCCGTTGGCTCCAGAGGTCAAAATACTCAAACGAAACCTTGCCATATTAATTCCGAACCCCATAAAACGTAATCTTTCTTGGGGCGACAATCTCGAAGAATCTCTTTTCTCTAGTCTCAGCAATAGTCAGTCCAAGTGCAATAGATCAGCGCCGCCCTTTCTTGCCCCTCGGATTTGTCTCCAGGGGACTCCTATTTATCGCGGCCGTGACGAAAGGAGGCAGCGTGGGAGCTCGGGAGAACAACCAAGAACAATCGTATGAAGACCTTCCCGGCCCTATCCCGACAGTTAACTCACTTAAAATGGGCTTACCTTTGGTATTTACAATTGTCAGAGTTTTCACGGCCGCATGGTCGTGCCACTAAACAGACTTCGGACTAGTGGCGGAGAAAGTGTACAAGGAACGTTATGTTCGGTTACCCTCTCCCCGCCGTTGCTAGTGCGTTCTGCCCATGAGATACTGAGCGAGTCGAAAAACTACTAAGAGCACTAGCGTGGCCAACCTAAAAATCACGGGGGACCTTAACCTAAAAACCTAAAAATCAACAAAACCTAAAAATCGTTCAACAACCTAAAAATCATCATCGCTTGGCGGCCATGTTATGAGAGTGCCCAACCTGAACCTAAAAATCCCAAGCTATTTAACGCCGCTGTACCACCACTCATGTCCGGTGTTACAACCTAAAAATCAACCAACCTAAAAATCACAGAACCTAAAAATCTCATCATATTCTAACCTAAAAATCTTGGCGAAGTGTCAATTGCCGATATAGTTGTGGTTCATGCACAACCTAAAAAACCTAAAAATCCCTAAAAATCTGCCTGGAGGTGACAACCTAAAAATCTAAAAATCAAAACCTAAAAATCAACCTAAAAATCCAACCCCGATCAGAACCTATCAACCTAACCTAAAAATCCACAAAAAAACCTAAAAATCACCTAAAAATCGCAACCTAAAAATCGCAGAAAACCTAAAAATCCTAAAAATCTCACTAGAAAACCTAAAAATCGGCAGCGAACGGATTAAAGAAGCCTATAGTAAAACGCACCAGACAGACCAATCATGCTCATGTGATAAATAGCTTCTGTGGAAAGCAGACGACTCAGAGCTCAGAGCCCTGAAACGTGATAGAGAAAGGAGGACGACTCAGAGTGAGTGTTAACCACTAGCATAGACGACTCAGAGACTCAGAGGACGACTCAGAGCACCGATGGTGCTATCCACAAGTACTATCGCAAAGACGGACGACTCAGAGAGAGGACCTCGATGGGACGACTCAGAGGAGTGAAGAGAGACGACTCAGAGTTAAAACTCGGAGAGCGACGACTCAGAGAGAGATAGGGACGACTCAGAGAGAGACGACTCAGAGTCTCATTATGACATTGACGACTCAGAGTGCGCCTTACTGTCCACACCTGGACGACTCAGAGGAGCGCACCAAATATCCGGGCACACGGTCTCAGGATATTCGAATCCGGCAGGACGACGACTCAGAGTCGCTTGTCGGACGACTCAGAGTGACGACTCAGAGCGACTCAGAGATCAACAGGAGGAGACGACTCAGAGACTCAGAGTATGACGACTCAGAGGATGCCGGTTTAACAGATGTTCGGTCCGGACGACTCAGAGTCAGGACGACTCAGAGCTCAGAGCGGACGACTCAGAGCATCCTGCTCTGACGACTCAGAGCCGAAAATGATCCAACGGGTAGGTGTGGTCGCATGCCCCCATGTCGTCATTTTTCCACACGCACCTGTACGTTATCGGCACGCCTTAGCGACTGGGAACGCCTTGCGCGCAGAGGATTACACTCAGATAGCATGGTCATCTATATGTTATTTGTGGATAGAGAAACACATGCGACAGGGCCCGGGACTGTCATCCTCCGTAAGCACTATCATAAAAGACGCGGACTCAATACTCCCCCTTCAACGCGTAGCACGCAGCCCAAATAAGATCCCACTCCATGATACACCGGAATTGGTTAGTCGGGATAGGTCATTTTGAGTGTTCTACATCGGTAGAACATCCGTCAGGAAGGCAAGTACTGTGATTTCCGACTTTAAAGGCAAGTACTGTGAGCCCAAAGAGGCAAGTACTGTGAGGCATGCTGCGCCACTGAGAAATCCTACTACAGGCAAGTACTGCAAGGCAAGTACTGAATCAAGGCAAGTACTGGTAAGGCAAGTACTAGGCAAGTACTGGGAGCATCGTCTAGGCAAGTACTGTGGACAAAGGCAAGTACTGAGTACTGTCGAGTAGGCAAGTACTGCTGGGCAAGTACTGTCGTATAAGGCAAGTACTGGGCAAGTACTGAAGTACTGAAGAAGTACCCCGCTGTAGGCAAGTACTGACGATAGCACAAGGCAAGTACTGTGGATCAGGCAAGTACTGCCTACCTTCAGGAGGCAAGTACTGCCCGCCACAGGCAAGTACTGCGCAGGAGGCAAGTACTGTTTGGGGGTATATAGGCAAGTACTGACTGAAGGCAAGTACTAGGCAAGTACTGAGTACAGGCAAGTACTGGACCGTCACACAGATGTAGTTCATGCAGTGTGGTAAGGAGACAGCGTTGATCTGTAGAGGCACGGTGAGGCAAGTAACTTACTTAACCTAGGAACCTAGGTACATGAGCCGATGCAGATTCACTATGGAAAAAACTTAACATCTCACTATGGAAAAGCTCACTATTCACTATGGAAATAACTCACTATGGAAAAACTCACTATGGAAAACTACTTACTTAACCTAGGTGACTTAACCTAGGCTAGGCCTTCACTATGGAAATAGGGGCGGGTTCACTTAACCTAGGGGATCACTATGGAAAGTCACTATGGAAAAACCTGAAGCCTCACTATGGAAACACTATGGAAAAATACTTAACCTAGGTCACTATGGAAAACTATGGAAACTAGGAACCGACGGTCTGTAGACCACTTAACCTAGGACGACAGCGACCCACTTTCACTATGGAAAGATAACCTCAACGTCACTATGGTCACTATGGAAAAACCTAGGACCTACTTAACCTAGGCTTAACCTAGTCACTATGGAAACAACGCACTTAACCTAGGCCTATCACTATGGAAAACTCACTTCACTATGGAAAAAAACTATGGATCACTATGGAAAACTATGGAAAAACGACTAGTCCTCACTATGGAAAACTTAACCTAGGTCAAATTCACTATCACTATGGAAATATGGAAACGACTACTCAATCACTATGGAAATCAACGCGACTAGCGACTACGGTCATTCAACGCGACTAGAATGCATGATACTGTTGGGAGCAATCAACGCGTCAACGCGACTAACTACTTCAACGCGACTAGACTAGCTTCCATCAACGCGACTATTAACTAAGCATTCAACGCGACTATTCAACGCGACTACATAATTTGACCAGATAAGACAGAGATCAGAAACAAGTCAACGCGACTATAACTATCAACGCGACTATGCTTATTCAAGAAGTAGACTAAGTTGGTTACCTGTTCAACGCGACTAATATACATAATTACCTCACGGCCTGGATTGGCCCGGCCGTGCTGCCCGCCATAGGAACCGGACCGGTCATTGCAGCTAGGACTTCACGCCTCAATATATTAACGTTTGCTACAGAAGGCTATTTTCAACTTGTCATGAGGTCAGTTCGATACGCGCATGACCCAAATAGGGGGCGTAGGCGTTGGTAGGAGGCGGCCTGAAAGTTGAGTTCGGCGGATACCGTCCGCAACGGAAAAGTCCTTAGACTCCGCGAGGTCCGGGTGGTCGTAATGGTTAATTAGCCCAGATTAACTTACACGCCATTACTCGGGGTTATGAGCTCTGCCGGGTCCCTGTGCCTAGGGTCTGAGTGAAACCCCATTCTGTCATGCACACTTTACGACCGTGTAGCCAGGAGGTGTAAAAATCGTCGGGGGGCTGGTCGATGTTAAGATTCTTTTAACTACCTCCGCTTTCGGGTCCCGTTAACTGACCTGAGACAACGGGATGGACTTCAAATGCGCATACAGTAGCGCGACGTGCCTGATCCAAAGATAACCGAACCATTTAAAACTGATGATACTCAAAGGTGTGCGTTAAGTTTATGGGGTCATTCTGCGAAGAGCTAAGTGGCGAGTTAGTTGTATCCCCCGGGCGACACATAGGAGGTTAGGTTCTGAGCCAAGGGACCACAGTTGTGCCCCTATTGATGCGAAGCTTTTTTAGACGACTCGTAAAATTCCCACGATACCTCAGTTCGGACTGAATCTGTTTAGCGAAACTATAAAAACGGCACGCACCACCATTTGGGATGTCTCGATAATCCTCTTGGCTCATAAGGAGTGCTGATCATTTACAGTCAGCTCCTTCATGCACGGCATGCACATGTTGAACTTACACACAAATCATGTAATGTATCCTGGGGTGGACTGAGACCCACACGTACAGGTGAATGATTTCAATTTCCGTGATTGTTGGCGTGTAACGTCATTCGAAGTGTTTTCATGCGCCGCCAACATGACCCACGTGGCTCGAGATGTGGCTCGAGATCTGCCTGTGGCTCGAGAGTGGCTCGAGATGATAGCTATATGGCCACTACGGTGGCTCGAGATTCGAGATTCCTTAAAATGACCTCACCACCTCCATCGTGGCTGTGGCTCGAGATGAGATGAGATCCTTTACCTCCATCCTGTGGCTCGAGATCTTACCTCCATCCTTCCTCCATCACCTCCGTGGCTCGAGATGTAAGTTTAGTGGCTCGAGATGATCTTCTCCATCCGTGGCTCGAGATTGGTGGGTGGCTCGAGATTACCTCCATCCTTAACCTCACCTCCATCCTTCGCACCTCCGTGGGTGGCTCGAGATTTCAACGTGGCTCGAGATATCCTTTCTGTGGTGGCTCGAGATCGAGATCCTCCATCCTGTGGCTCGAGATCTTCCTCCATCCTTAGAAGTGGCTCGAGATTCCTTCATCCGTGGCTCGAGATCTCGAGATGGTGGCTCGAGATTGTGGCTCGAGATGACCTTGTGGTGGCTCGAGATGGCGTGGCTCGAGATTCGAGATCCTCCATCCTTCCGCGGTGGCTCGAGATAGATTACCGATAGTGGCTCGAGATGATTTTCTCGCCTGCGACGAATTGGTTTATCACCTCCATCCTTGTATAAGCGCGACCTCCATCCTTTAAGGTACGCATGTAACATGGGATGAATAGCCCATCCTCAATGGTGTGGGATGACCAATTTTGGACCCAGTCGTCTAACGGGCGGCATGTAGGAGCTCTAGCTCTCGTCCTGGCCATAGCTGGGTCTTGTGTGGGATGACTCGAATGTGTGGGATGAGTGTGGGTGTGGGATGACGTGTGGGATGACTCCTTCAATGTGTGGGTGTGGGATGACCCATCACATGGTGTGGGATGACAGTGGTGTGGGATGACCAGTGTGGGATGACCAGACGAGGACGGGAGCAGTGTGGGGTGTGGGATGGTGTGGGGTGTGGGATGACAGCTCGAAACTTCGGCCGGTGTGGGATGACACACCAGGTGTGGGATGACCGAGCCAGAATGGAATGTAAGCTGTGTGGTGTGGGATGACGACAACAACAGACCAGTGTGGGATGACGATGACAACTCCCTGGTGTGGGATGACGTGGGATGACATGACATGTGTGGGATGACTGGGATGACTGTGTGGGATGACGCAGTGTGGGATGTGTGGGATGACGCATGACCCCTTGCATGACCCGTGTGGGATGACGTGGGATGACATGACGGTGTGGGATGACCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCATGACCCCTTGCAT", 12, 540, 20, []string{"TAAATCGCCACC", "AAGTGAGCCAAG", "AGGCAAGTACTG", "GTGGCTCGAGAT", "CATGACCCCTTG", "ATGACCCCTTGC", "TGACCCCTTGCA", "GACCCCTTGCAT", "ACCCCTTGCATG", "CCCCTTGCATGA", "CCCTTGCATGAC", "CCTTGCATGACC", "CTTGCATGACCC", "GCATGACCCCTT", "TTGCATGACCCC", "TGCATGACCCCT"})
}

func assert(x bool) {
	if !x {
		panic("assertion failed")
	}
}

func test(s string, k, L, t int, r []string) {
	p := clumps(s, k, L, t)
	fmt.Println(p)
	assert(reflect.DeepEqual(p, r))
}

func clumps(s string, k, L, t int) []string {
	m := make(map[string]bool)
	r := []string{}
	for i := range len(s) - L + 1 {
		for j := i; j < i+L-k; j++ {
			s0 := s[i : i+L]
			s1 := s[j : j+k]
			if strings.Count(s0, s1) == t && !m[s1] {
				r, m[s1] = append(r, s1), true
			}
		}
	}
	return r
}
